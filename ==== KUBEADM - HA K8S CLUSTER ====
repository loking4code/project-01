==== KUBEADM - HA K8S CLUSTER ====

------------------------------Install haproxy & keepalived( MASTER NODE ) ----------------------------------

apt-get update && apt-get install haproxy keepalived -y

vim /etc/keepalived/check_apiserver.sh
#############################

#!/bin/sh
APISERVER_VIP=103.63.109.120
APISERVER_DEST_PORT=6443

errorExit() {
    echo "*** $*" 1>&2
    exit 1
}

curl --silent --max-time 2 --insecure https://localhost:${APISERVER_DEST_PORT}/ -o /dev/null || errorExit "Error GET https://localhost:${APISERVER_DEST_PORT}/"
if ip addr | grep -q ${APISERVER_VIP}; then
    curl --silent --max-time 2 --insecure https://${APISERVER_VIP}:${APISERVER_DEST_PORT}/ -o /dev/null || errorExit "Error GET https://${APISERVER_VIP}:${APISERVER_DEST_PORT}/"
fi

#############################


chmod +x /etc/keepalived/check_apiserver.sh	

vim /etc/keepalived/keepalived.conf

#############################
global_defs {
    router_id LVS_DEVEL
}
vrrp_script check_apiserver {
  script "/etc/keepalived/check_apiserver.sh"
  interval 3
  weight -2
  fall 10
  rise 2
}

vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 151
    priority 255
    authentication {
        auth_type PASS
        auth_pass P@##D321!
    }
    virtual_ipaddress {
        103.63.109.120/24
    }
    track_script {
        check_apiserver
    }
}
#############################

cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg-org
vim /etc/haproxy/haproxy.cfg

#############################

global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
#---------------------------------------------------------------------
# apiserver frontend which proxys to the masters
#---------------------------------------------------------------------
frontend apiserver
    bind *:8443
    mode tcp
    option tcplog
    default_backend apiserver
#---------------------------------------------------------------------
# round robin balancing for apiserver
#---------------------------------------------------------------------
backend apiserver
    option httpchk GET /healthz
    http-check expect status 200
    mode tcp
    option ssl-hello-chk
    balance     roundrobin
        server master1 103.63.109.185:6443 check

#############################

systemctl restart haproxy keepalived
systemctl enable keepalived --now
systemctl enable haproxy --now

for f in master2 master3; do scp /etc/keepalived/check_apiserver.sh /etc/keepalived/keepalived.conf root@$f:/etc/keepalived; scp /etc/haproxy/haproxy.cfg root@$f:/etc/haproxy; done

----------------------------Install CONTAINERD ( ALL NODE )---------------------

# Configure persistent loading of modules
sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF

# Load at runtime
sudo modprobe overlay
sudo modprobe br_netfilter

# Ensure sysctl params are set
sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

# Reload configs
sudo sysctl --system

# Install required packages
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

# Add Docker repo
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

# Install containerd
sudo apt update
sudo apt install -y containerd.io

# Configure containerd and start service
sudo su -
mkdir -p /etc/containerd
containerd config default>/etc/containerd/config.toml

# restart containerd
	sudo systemctl restart containerd
	sudo systemctl enable containerd
	systemctl status  containerd

--------------------------------------------------------------------

----------------Install kubeadm,kubelet,kubectl ( ALL NODE )---------------------

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

apt-get update && apt-get install -y kubelet kubeadm kubectl

apt-mark hold kubelet kubeadm kubectl

systemctl enable kubelet --now

kubeadm version

-----------------------Install on ALL NODE--------------------------------

swapoff -a
modprobe br_netfilter
modprobe nf_conntrack
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
sh -c "echo '1' > /proc/sys/net/ipv4/ip_forward"
cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

modprobe br_netfilter
sh -c "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"
sh -c "echo '1' > /proc/sys/net/ipv4/ip_forward"
sysctl --system

cat << EOF >> /etc/hosts
160.10.10.133 node01
160.10.10.165 node02
160.10.10.218 node03
EOF

-------------------Tạo Cluster---------------
##Chạy trên master node
----- Tải image
kubeadm config images pull

#Dùng trong trường hợp build HA cho master
kubeadm init --control-plane-endpoint "103.63.109.120:8443" --upload-certs

or 
#Dùng trong trường hợp Build 1 master
kubeadm init --apiserver-advertise-address=10.10.10.188 --upload-certs
----- Cài đặt kubectl
mkdir -p $HOME/.kube
sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

------------------Join Worker node------------

##Dùng token sau khi Tạo cluster
##Join node sau khi token hết hạn
--------- Kiểm tra thời hạn token trên master node: 
kubeadm token list ----> Chạy lệnh trên Master node
--------- Tạo token mới
kubeadm token create ----> Chạy lệnh trên Master node
--------- Tạo discovery-token-ca-cert-hash ----> Chạy lệnh trên Master node
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'

---------Lệnh Join worker node vào cụm
kubeadm join 160.10.10.133:6443 --token mgem6r.bbwkktnqw8i246sg --discovery-token-ca-cert-hash sha256:cf4a04e53bd8f6335b855e2fb265b27043cc03deee1b7b261b4c4c4f9e3ec151

-------------------Cài đặt CNI Calico-----------------
kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml

##Disable mode IPIP trong calico.yaml(chuyển từ Always => Never) hoặc thêm giao thức Any Protocol(Custom Protocol) trong Security Group



